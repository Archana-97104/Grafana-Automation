WITH AD RESPONSE

package grafana;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.AfterSuite;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.BeforeSuite;
import org.testng.annotations.Test;


import java.io.FileOutputStream;
import java.io.IOException;
import java.time.Duration;


public class GrafanaTest {
	private XSSFWorkbook outputWorkbook;
	private XSSFSheet outputSheet;
	private String outputFilePath;
	private WebDriver driver;

	@BeforeSuite
	public void setUp() throws IOException {

	 outputFilePath = "/Users/604550803/Downloads/Grafana/Data/console_output.xlsx";


		outputWorkbook = new XSSFWorkbook();
		outputSheet = outputWorkbook.createSheet("Console Output");
		XSSFRow headerRow = outputSheet.createRow(0);
		headerRow.createCell(0).setCellValue("Environment");
		headerRow.createCell(1).setCellValue("Region");
		headerRow.createCell(2).setCellValue("Query");
		headerRow.createCell(3).setCellValue("Session");
		headerRow.createCell(4).setCellValue("Result Text");
	}

	@BeforeMethod
	public void setUp1() {
		driver = new ChromeDriver();
		driver.manage().window().maximize();
	}

	@Test(dataProvider = "DropdownData", dataProviderClass = ExcelReader.class)
	public void runGrafana(String envInput, String regionInput, String queryInput, String sessionInput, String fromDate, String toDate) throws IOException {
		// to open chrome

		driver.get("https://d3q7rt0kr5fynf.cloudfront.net/ad-tools/mediatailor-logs-query-builder.html");
		// to select dropdown
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(30));
		WebElement dropdown1 = driver.findElement(By.id("envInput"));
		Select option1 = new Select(dropdown1);
		option1.selectByVisibleText(envInput);
		WebElement dropdown2 = driver.findElement(By.id("regionInput"));
		Select option2 = new Select(dropdown2);
		option2.selectByVisibleText(regionInput);
		WebElement dropdown3 = driver.findElement(By.id("queryInput"));
		Select option3 = new Select(dropdown3);
		option3.selectByVisibleText(queryInput);
		driver.findElement(By.id("sessionInput")).sendKeys(sessionInput);
		driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));
		driver.findElement(By.id("button-mt")).click();
		Set<String> windowHandles = driver.getWindowHandles();
		List<String> allWindows = new ArrayList<String>(windowHandles);
		driver.switchTo().window(allWindows.get(1));
		driver.findElement(By.xpath("//span[@class='css-1ueg5w']//span[1]")).click();
		
		System.out.println("Excel From Date: " + fromDate);
		System.out.println("Excel To Date: " + toDate);
		
		// Enter From date using updated xpath
		WebElement fromDateInput = driver.findElement(By.xpath("//input[@class='css-8tk2dk-input-input' and @aria-label='Time Range from field']"));
		fromDateInput.click();
		fromDateInput.clear();
		fromDateInput.sendKeys(fromDate);
		
		// Enter To date using updated xpath
		WebElement toDateInput = driver.findElement(By.xpath("//input[@class='css-8tk2dk-input-input' and @aria-label='Time Range to field']"));
		toDateInput.click();
		toDateInput.clear();
		toDateInput.sendKeys(toDate);
		
		try {
			Thread.sleep(1000);
			System.out.println("From Date after setting: " + fromDateInput.getAttribute("value"));
			System.out.println("To Date after setting: " + toDateInput.getAttribute("value"));
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		driver.findElement(By.xpath("//span[text()='Apply time range']")).click();
		//driver.findElement(By.xpath("//label[text()='Last 7 days']")).click();
		driver.findElement(By.xpath("//button[@class= 'css-5se5b3 css-1wx8bl8-positionRelative']")).click();
		String text = driver.findElement(By.xpath("//button[@class= 'css-5se5b3 css-1wx8bl8-positionRelative']"))
				.getText();
		String text1;
	    try {
	        WebElement resultButton = wait.until(driver -> driver.findElement(By.xpath("//button[@class= 'css-5se5b3 css-1wx8bl8-positionRelative']")));
	        text1 = resultButton.getText();
	    } catch (Exception e) {
	        System.out.println("No output fetched for this case. Skipping...");
	        text1 = "No output fetched.";
	    }
		
		String resultPath = "/Users/604550803/Downloads/Grafana/Data";
		if (text1.length() > 32767) {
	        // Save the large text to a file
	        String baseDir = "/Users/604550803/Downloads/Grafana/Data";
	        resultPath = baseDir + "/result_" + System.currentTimeMillis() + ".txt";
	        try (FileOutputStream fos = new FileOutputStream(resultPath)) {
	            fos.write(text1.getBytes());
	        }
	    } else {
	        // Text fits within Excel cell limits
	        resultPath = text1;
	    }


		// to write results in excel
		int lastRow = outputSheet.getLastRowNum() + 1;
		XSSFRow row = outputSheet.createRow(lastRow);
		row.createCell(0).setCellValue(envInput);
		row.createCell(1).setCellValue(regionInput);
		row.createCell(2).setCellValue(queryInput);
		row.createCell(3).setCellValue(sessionInput);
		row.createCell(4).setCellValue(resultPath);

		System.out.println("Result written to row: " + lastRow);
		if (text1.length() > 32767) {
	        System.out.println("Large content saved to file: " + resultPath);
	    }
	}

	@AfterMethod
	public void tearDown() {
		if (driver != null) {

		}
	}

	@AfterSuite
	public void tearDownSuite() throws IOException {
		if (outputWorkbook != null) {
			try (FileOutputStream fos = new FileOutputStream(outputFilePath)) {
				outputWorkbook.write(fos);
			}
			outputWorkbook.close();
		}
	}

}






package grafana;

import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.testng.annotations.DataProvider;

public class ExcelReader {

    @DataProvider(name = "DropdownData")
    public Object[][] getData() throws IOException {
        String filePath = "./data/Mysheet.xlsx";
        FileInputStream fileInputStream = new FileInputStream(filePath);
        XSSFWorkbook workbook = new XSSFWorkbook(fileInputStream);
        XSSFSheet sheet = workbook.getSheetAt(0);

        List<Object[]> data = new ArrayList<>();
        Iterator<Row> rows = sheet.iterator();

        // Skip header row if present
        if (rows.hasNext()) rows.next();

        // Iterate through each row and read cell data
        while (rows.hasNext()) {
            Row row = rows.next();
            int cellCount = row.getLastCellNum(); 
            String[] rowData = new String[cellCount];

            for (int i = 0; i < cellCount; i++) {
                Cell cell = row.getCell(i);
                rowData[i] = (cell != null) ? cell.toString() : "";
            }

            // Ensure that rowData has at least 6 columns (handling missing values)
            if (rowData.length < 6) {
                String[] extendedRowData = new String[6];
                System.arraycopy(rowData, 0, extendedRowData, 0, rowData.length);
                for (int i = rowData.length; i < 6; i++) {
                    extendedRowData[i] = ""; // Assign empty string if value is missing
                }
                data.add(extendedRowData);
            } else {
                data.add(rowData);
            }
        }

        workbook.close();
        return data.toArray(new Object[0][0]);
    }
}
